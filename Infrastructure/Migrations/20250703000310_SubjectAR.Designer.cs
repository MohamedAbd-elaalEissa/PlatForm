// <auto-generated />
using System;
using Infrastructure.Presistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(PlatFormDbContext))]
    [Migration("20250703000310_SubjectAR")]
    partial class SubjectAR
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AcademicLevels", b =>
                {
                    b.Property<int>("AcademicLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicLevelID"));

                    b.Property<string>("AcademicLevelName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AcademicLevelID");

                    b.HasIndex("AcademicLevelName")
                        .IsUnique()
                        .HasFilter("[AcademicLevelName] IS NOT NULL");

                    b.ToTable("AcademicLevels", "Relation");
                });

            modelBuilder.Entity("Domain.Entities.Chapters", b =>
                {
                    b.Property<int>("ChapterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChapterID"));

                    b.Property<int>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<string>("ChapterName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ChapterID");

                    b.HasIndex("AcademicLevelId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Chapters", "Relation");
                });

            modelBuilder.Entity("Domain.Entities.FileAnswers", b =>
                {
                    b.Property<int>("FileAnswersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileAnswersID"));

                    b.Property<string>("AnswerName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FilesID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("FileAnswersID");

                    b.HasIndex("AnswerName")
                        .IsUnique()
                        .HasFilter("[AnswerName] IS NOT NULL");

                    b.HasIndex("FilesID");

                    b.HasIndex("StudentID");

                    b.ToTable("FileAnswers", "Relation");
                });

            modelBuilder.Entity("Domain.Entities.Files", b =>
                {
                    b.Property<int>("FilesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FilesID"));

                    b.Property<int?>("ChapterID")
                        .HasColumnType("int");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAnswer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBook")
                        .HasColumnType("bit");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FilesID");

                    b.HasIndex("ChapterID");

                    b.HasIndex("FileName")
                        .IsUnique()
                        .HasFilter("[FileName] IS NOT NULL");

                    b.HasIndex("TeacherID");

                    b.ToTable("Files", "Relation");
                });

            modelBuilder.Entity("Domain.Entities.OfflineMessage", b =>
                {
                    b.Property<int>("OfflineMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfflineMessageID"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OfflineMessageID");

                    b.ToTable("OfflineMessage");
                });

            modelBuilder.Entity("Domain.Entities.Students", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"));

                    b.Property<int?>("AcademicLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentID");

                    b.HasIndex("AcademicLevelId");

                    b.ToTable("Students", "Relation");
                });

            modelBuilder.Entity("Domain.Entities.Subjects", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Domain.Entities.Teachers", b =>
                {
                    b.Property<int>("TeacherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherID"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Brief")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagesUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TeacherID");

                    b.HasIndex("SubjectId");

                    b.ToTable("Teachers", "Relation");
                });

            modelBuilder.Entity("Domain.Entities.Videos", b =>
                {
                    b.Property<int>("VideoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoID"));

                    b.Property<int?>("ChapterID")
                        .HasColumnType("int");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("VideoName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VideoID");

                    b.HasIndex("ChapterID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Videos", "Relation");
                });

            modelBuilder.Entity("StudentsTeachers", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.HasKey("StudentID", "TeacherID");

                    b.HasIndex("TeacherID");

                    b.ToTable("StudentsTeachers", "Relation");
                });

            modelBuilder.Entity("Domain.Entities.Chapters", b =>
                {
                    b.HasOne("Domain.Entities.AcademicLevels", "AcademicLevel")
                        .WithMany("Chapters")
                        .HasForeignKey("AcademicLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Teachers", "Teacher")
                        .WithMany("Chapters")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicLevel");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Entities.FileAnswers", b =>
                {
                    b.HasOne("Domain.Entities.Files", "Files")
                        .WithMany()
                        .HasForeignKey("FilesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Students", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID");

                    b.Navigation("Files");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Files", b =>
                {
                    b.HasOne("Domain.Entities.Chapters", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterID");

                    b.HasOne("Domain.Entities.Teachers", "Teacher")
                        .WithMany("Files")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Entities.Students", b =>
                {
                    b.HasOne("Domain.Entities.AcademicLevels", "AcademicLevel")
                        .WithMany()
                        .HasForeignKey("AcademicLevelId");

                    b.Navigation("AcademicLevel");
                });

            modelBuilder.Entity("Domain.Entities.Teachers", b =>
                {
                    b.HasOne("Domain.Entities.Subjects", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Domain.Entities.Videos", b =>
                {
                    b.HasOne("Domain.Entities.Chapters", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterID");

                    b.HasOne("Domain.Entities.Teachers", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StudentsTeachers", b =>
                {
                    b.HasOne("Domain.Entities.Students", null)
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Teachers", null)
                        .WithMany()
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AcademicLevels", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("Domain.Entities.Teachers", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
